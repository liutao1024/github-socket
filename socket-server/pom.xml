<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>spring</groupId>
	<artifactId>socket-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>socket-server</name>
	<url>http://maven.apache.org</url>
	
	<properties>
		<!-- spring 版本号 -->
		<spring.version>4.1.4.RELEASE</spring.version>
		<!-- junit 版本号 -->
		<junit.version>4.12</junit.version>
		<!-- mybatis 版本号 -->
		<mybatis.version>3.4.6</mybatis.version>
		<!-- spring-mybatis 版本号 -->
		<spring.mybatis.version>1.3.2</spring.mybatis.version>
		<!-- mysql 驱动版本号 -->
		<mysql.version>5.1.34</mysql.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<!-- json -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>1.2.49</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- 添加mybatis依赖 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${spring.mybatis.version}</version>
		</dependency>
		<!-- mysql 驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.25</version>
		</dependency>
		<!-- 需要的log4j2日志包依赖 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.5.4</version>
        </dependency>
		<dependency>
	        <groupId>org.mybatis.generator</groupId>
	     	<artifactId>mybatis-generator-core</artifactId>
	        <version>1.3.5</version>
      	</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
		</dependency>
		<!-- <dependency>
			<groupId>org.jsonschema2pojo</groupId>
			<artifactId>jsonschema2pojo-maven-plugin</artifactId>
			<version>0.4.34</version> 
		</dependency> -->
	</dependencies>
	<!-- maven 打包时的一些配置 -->
	<build>
		<plugins>
			<!-- 指定mavne项目的jdk版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- mvn 打包跳过Test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.4.2</version>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<!-- 打包时加入maven依赖 并指定mian 的两种方法-->
			<!-- 1.此插件在打jar包后,会出现scheme缺失需要的xsd -->
			<!--
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<appendAssemblyId>false</appendAssemblyId>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				<archive>  
		            <manifest>  
		                <mainClass>cn.spring.mvn.socket.SocketManager</mainClass>  
		            </manifest>  
		        </archive>  
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>assembly</goal>
						</goals>
					</execution>
				</executions>
			</plugin> 
			-->
			<!-- 2.此插件解决1插件的问题 -->
			<plugin>  
			    <groupId>org.apache.maven.plugins</groupId>  
			    <artifactId>maven-shade-plugin</artifactId>  
			    <version>3.1.1</version>  
			    <executions>  
			        <execution>  
			            <phase>package</phase>  
			            <goals>  
			                <goal>shade</goal>  
			            </goals>  
			            <configuration>  
			                <transformers>  
			                    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
			                        <resource>META-INF/spring.handlers</resource>  <!-- 将所有的.xsd用append的方法添加到对应文件 -->
			                    </transformer>  
			                    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
			                        <resource>META-INF/spring.schemas</resource>  
			                    </transformer>  
			                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">  
			                        <mainClass>cn.spring.mvn.socket.SocketManager</mainClass>  <!-- 指定Main方法 -->
			                    </transformer>  
			                </transformers>  
			            </configuration>  
			        </execution>  
			    </executions>  
			</plugin> 
			<!-- 20180904 pm@17:10 -->
			<!-- 根据数据库表生成实体类 可用 -->
			<plugin>
	           <groupId>org.mybatis.generator</groupId>
	           <artifactId>mybatis-generator-maven-plugin</artifactId>
	           <version>1.3.5</version>
	           <executions>
	              <execution>
	                 <id>Generate MyBatis Files</id>
	                 <goals>
	                    <goal>generate</goal>
	                 </goals>
	                 <phase>generate</phase>
	                 <configuration>
	                    <verbose>true</verbose>
	                    <overwrite>true</overwrite>
	                 </configuration>
	              </execution>
	           </executions>
	           <dependencies>
	              <dependency>
	                 <groupId>mysql</groupId>
	                 <artifactId>mysql-connector-java</artifactId>
	                 <version>5.1.25</version>
	              </dependency>
	              <dependency>
	                 <groupId>org.mybatis.generator</groupId>
	           		 <artifactId>mybatis-generator-core</artifactId>
	                 <version>1.3.5</version>
	              </dependency>
	              <dependency>
	                 <groupId>org.mybatis</groupId>
	                 <artifactId>mybatis</artifactId>
	                 <version>${mybatis.version}</version>
	              </dependency>
	           </dependencies>
	        </plugin>
			<!-- 20180906 am@11:10 -->
			<!-- 根据Json文件自动生成Java实体类 -->
			<plugin>
			    <groupId>org.jsonschema2pojo</groupId>
			    <artifactId>jsonschema2pojo-maven-plugin</artifactId>
			    <version>0.4.34</version>
			    <configuration>
			        <!-- 
			        	sourceDirectory:json文件所在的目录,会将该目录下所有json进行转换,不支持指定单个文件,
			        	如果不想全部转换,可以添加一个excludes节点.如:
							<excludes>
							    <exclude>init.json</exclude>
							</excludes>
			         -->
			        <sourceDirectory>${basedir}/src/main/resources/interface/json</sourceDirectory>
			        <!-- 
			        	targetPackage:生成的Java pojo类目标包名.
			         -->
			        <targetPackage>com.demo.bean</targetPackage>
			        <!-- 
			        	outputDirectory:生成Java pojo类的(根)目录,换句话说,源文件最终目录为此目录+包目录,注意,此值默认为
			        	target\java-gen,官方配置中并没有该默认值,如果成功生成后发现找不到源文件,看一看是不是这个原因.
			         -->
			        <outputDirectory>${basedir}/src/main/java</outputDirectory>
			        <!-- 
			        	addCompileSourceRoot:是否将输出目录作为项目的源码根目录.
			         -->
			        <addCompileSourceRoot>true</addCompileSourceRoot>
			        <!-- 
			        	sourceType:json格式,两个可选值,jsonschema:json模式和json:json文件,默认为jsonschema,
			        	不过我们一般是希望直接使用json文件生成,所以指定为json.
			         -->
			        <sourceType>json</sourceType>
			        <!-- 
			        	annotationStyle:生成的(字段)注解样式,有五个可选值:jackson1/jackson2/gson/moshi1/none,
			        		默认是jackson2,一般指定none就可以了,还有比如用fastjson,那也要指定none.
			         -->
			        <annotationStyle>none</annotationStyle>
			    </configuration>
			    <!--  -->
			    <executions>
			        <execution>
			            <goals>
			                <goal>generate</goal>
			            </goals>
			        </execution>
			    </executions>
			</plugin>
		</plugins>
	</build>
</project>
